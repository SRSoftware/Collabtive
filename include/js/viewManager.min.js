Vue.config.silent=!0;
function createView(a){var b={items:[],pages:[],limit:10,offset:0,currentPage:1,itemsCount:0,itemType:a.itemType,dependencies:a.dependencies,url:a.url};new Ajax.Request(b.url,{method:"get",onSuccess:function(a){console.log("url "+b.url);a=JSON.parse(a.responseText);b.items=a.items;b.itemsCount=a.count;a=pagination.listPages(a.count);b.pages=a},onLoading:function(){startWait("progress"+a.el)},onComplete:function(){stopWait("progress"+a.el)},onFailure:function(){}});return new Vue({el:"#"+a.el,data:b})}
function updateView(a,b){void 0===b&&(b=!0);var c=a.url;0<a.limit&&(c+="&limit="+a.limit);0<a.offset&&(c+="&offset="+a.offset);new Ajax.Request(c,{method:"get",onSuccess:function(c){c=JSON.parse(c.responseText);a.$set("items",c.items);a.$set("pages",pagination.listPages(c.count));if(1==b&&(c=a.$get("dependencies"),0<c.length))for(var e=0;e<c.length;e++)c[e].$set("limit",a.limit),c[e].$set("offset",a.offset),updateView(c[e],c[e].url)},onLoading:function(){startWait("progress"+a.$el.id)},onComplete:function(){stopWait("progress"+
a.$el.id);a.$emit("updated")},onFailure:function(){}})}
var pagination={itemsPerPage:10,listPages:function(a){a=Math.ceil(a/this.itemsPerPage);for(var b=[],c=0;c<a;c++){var d=c+1;b.push({index:d,limit:d*this.itemsPerPage})}return b},loadPage:function(a,b){var c=b*this.itemsPerPage-this.itemsPerPage;a.$set("limit",this.itemsPerPage);a.$set("offset",c);a.$set("currentPage",b);updateView(a,!0)},loadNextPage:function(a){var b=a.$get("currentPage"),c=Math.ceil(a.$get("itemsCount")/this.itemsPerPage),b=b+1;b>c&&(b=c);console.log("next"+b);this.loadPage(a,b)},
loadPrevPage:function(a){var b=a.$get("currentPage")-1;1>b&&(b=1);console.log("prev"+b);this.loadPage(a,b)}};
function submitForm(a){var b=a.currentTarget,c=b.action,d=validateCompleteForm(b);console.log("validates:"+d);a.stopPropagation();a.preventDefault();if(1==d){a="";for(i=0;i<b.elements.length;i++)d=b.elements[i],void 0!=d.value&&(a+="&"+d.name+"="+d.value);new Ajax.Request(c,{method:"POST",postBody:a,onSuccess:function(a){200==a.status&&(updateView(formView,!1),systemMessage.added(formView.$get("itemType")))},onLoading:function(){startWait("progress"+formView.$el)},onComplete:function(){console.log("added");
stopWait("progress"+formView.$el)},onFailure:function(){console.log("error")}})}}function startWait(a){$(a).style.display="block"}function stopWait(a){$(a).style.display="none"}closeEndcolor="#377814";deleteEndcolor="#c62424";function confirmDelete(a,b,c,d){1==confirm(a)&&deleteElement(b,c,d)}
function deleteElement(a,b,c){new Ajax.Request(b,{method:"get",onSuccess:function(b){"ok"==b.responseText&&(removeRow(a,deleteEndcolor),void 0!=c&&(updateView(c),console.log("element deleted"),systemMessage.deleted(c.$get("itemType"))))}})}
function closeElement(a,b,c){new Ajax.Request(b,{method:"get",onSuccess:function(b){if("ok"==b.responseText){console.log("payload ok"+a+c);try{removeRow(a,closeEndcolor)}catch(e){console.log(e)}void 0!=c&&(updateView(c),console.log("element closed"),systemMessage.closed(c.$get("itemType")))}}})}var paginationComponent=Vue.extend({props:["view","pages","currentPage"],template:'<span id="paging" style="margin-left:10px;"> <button style="float:none;font-size:9pt;margin:0 1px 0 1px;" onclick="pagination.loadPrevPage({{view}})"><<</button><span id="page{{page.index}}" v-for="page in pages" style="margin-left:2px;"> <button v-bind:style="currentPage == page.index ? \'font-size:18px;color:red;float:none;margin:0 0 0 0;\' : \'font-size:9pt;float:none;margin:0 0 0 0;\'" onclick="pagination.loadPage({{view}},{{page.index}});">{{page.index}}</button> </span> <button style="float:none;font-size:9pt;margin:0 1px 0 1px;" onclick="pagination.loadNextPage({{view}})">>></button> </span>'});
Vue.component("pagination",paginationComponent);
